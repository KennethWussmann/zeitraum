scalar DateTime

type Query {
  """
  Software version of the server.
  """
  version: String!
  me: User!
  tags(input: TagSearch): TagList!
  timeSpans(input: TimeSpanSearch): TimeSpanList!
  timeSpan(id: ID!): TimeSpan!
}

type Mutation {
  createTimeSpan(input: CreateUpdateTimeSpan!): TimeSpan!
  updateTimeSpan(id: ID!, input: CreateUpdateTimeSpan!): TimeSpan!
  deleteTimeSpan(id: ID!): Boolean!
  """
  Close a time span that does not have an end time yet.
  When invoked without id it will close the time span that is running longest.
  Optionally you can provide an end time to close the time span at a specific time.
  """
  closeTimeSpan(id: ID, end: DateTime): TimeSpan!
}

input TimeSpanSearch {
  fromInclusive: DateTime
  toInclusive: DateTime
  running: Boolean
  tags: [String!]
  limit: Int = 100
  offset: Int = 0
}

input TagSearch {
  query: String
  limit: Int = 100
  offset: Int = 0
}

input CreateUpdateTimeSpan {
  start: DateTime!
  end: DateTime
  note: String
  tags: [String!]!
}

type TimeSpanList {
  items: [TimeSpan!]!
  total: Int!
}

type TagList {
  items: [Tag!]!
  total: Int!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
}

type Tag {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type TimeSpan {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  start: DateTime!
  end: DateTime
  note: String
  running: Boolean!
  tags: [Tag!]!
}
