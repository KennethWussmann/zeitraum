// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package cmd

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type CreatePreset struct {
	Name string   `json:"name"`
	Tags []string `json:"tags"`
	Note *string  `json:"note"`
}

// GetName returns CreatePreset.Name, and is useful for accessing the field via an interface.
func (v *CreatePreset) GetName() string { return v.Name }

// GetTags returns CreatePreset.Tags, and is useful for accessing the field via an interface.
func (v *CreatePreset) GetTags() []string { return v.Tags }

// GetNote returns CreatePreset.Note, and is useful for accessing the field via an interface.
func (v *CreatePreset) GetNote() *string { return v.Note }

type CreateTimeSpan struct {
	Start time.Time  `json:"start"`
	End   *time.Time `json:"end"`
	Note  *string    `json:"note"`
	Tags  []string   `json:"tags"`
	// Stop the longest running time span before creating the new one.
	StopPreviousRunning *bool `json:"stopPreviousRunning"`
}

// GetStart returns CreateTimeSpan.Start, and is useful for accessing the field via an interface.
func (v *CreateTimeSpan) GetStart() time.Time { return v.Start }

// GetEnd returns CreateTimeSpan.End, and is useful for accessing the field via an interface.
func (v *CreateTimeSpan) GetEnd() *time.Time { return v.End }

// GetNote returns CreateTimeSpan.Note, and is useful for accessing the field via an interface.
func (v *CreateTimeSpan) GetNote() *string { return v.Note }

// GetTags returns CreateTimeSpan.Tags, and is useful for accessing the field via an interface.
func (v *CreateTimeSpan) GetTags() []string { return v.Tags }

// GetStopPreviousRunning returns CreateTimeSpan.StopPreviousRunning, and is useful for accessing the field via an interface.
func (v *CreateTimeSpan) GetStopPreviousRunning() *bool { return v.StopPreviousRunning }

type CreateTimeSpanFromPreset struct {
	PresetId string     `json:"presetId"`
	Start    time.Time  `json:"start"`
	End      *time.Time `json:"end"`
	// Stop the longest running time span before creating the new one.
	StopPreviousRunning *bool `json:"stopPreviousRunning"`
}

// GetPresetId returns CreateTimeSpanFromPreset.PresetId, and is useful for accessing the field via an interface.
func (v *CreateTimeSpanFromPreset) GetPresetId() string { return v.PresetId }

// GetStart returns CreateTimeSpanFromPreset.Start, and is useful for accessing the field via an interface.
func (v *CreateTimeSpanFromPreset) GetStart() time.Time { return v.Start }

// GetEnd returns CreateTimeSpanFromPreset.End, and is useful for accessing the field via an interface.
func (v *CreateTimeSpanFromPreset) GetEnd() *time.Time { return v.End }

// GetStopPreviousRunning returns CreateTimeSpanFromPreset.StopPreviousRunning, and is useful for accessing the field via an interface.
func (v *CreateTimeSpanFromPreset) GetStopPreviousRunning() *bool { return v.StopPreviousRunning }

// import "../tag/tag.fragment.graphql"
type PresetFragment struct {
	Id        string                   `json:"id"`
	CreatedAt time.Time                `json:"createdAt"`
	UpdatedAt time.Time                `json:"updatedAt"`
	SortIndex int                      `json:"sortIndex"`
	Name      string                   `json:"name"`
	Note      *string                  `json:"note"`
	Tags      []*PresetFragmentTagsTag `json:"tags"`
}

// GetId returns PresetFragment.Id, and is useful for accessing the field via an interface.
func (v *PresetFragment) GetId() string { return v.Id }

// GetCreatedAt returns PresetFragment.CreatedAt, and is useful for accessing the field via an interface.
func (v *PresetFragment) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns PresetFragment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *PresetFragment) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetSortIndex returns PresetFragment.SortIndex, and is useful for accessing the field via an interface.
func (v *PresetFragment) GetSortIndex() int { return v.SortIndex }

// GetName returns PresetFragment.Name, and is useful for accessing the field via an interface.
func (v *PresetFragment) GetName() string { return v.Name }

// GetNote returns PresetFragment.Note, and is useful for accessing the field via an interface.
func (v *PresetFragment) GetNote() *string { return v.Note }

// GetTags returns PresetFragment.Tags, and is useful for accessing the field via an interface.
func (v *PresetFragment) GetTags() []*PresetFragmentTagsTag { return v.Tags }

// PresetFragmentTagsTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// A tag is a label that can be attached to time spans and presets.
// They can be structured in any shape or form to categorize time tracking.
type PresetFragmentTagsTag struct {
	TagFragment `json:"-"`
}

// GetId returns PresetFragmentTagsTag.Id, and is useful for accessing the field via an interface.
func (v *PresetFragmentTagsTag) GetId() string { return v.TagFragment.Id }

// GetCreatedAt returns PresetFragmentTagsTag.CreatedAt, and is useful for accessing the field via an interface.
func (v *PresetFragmentTagsTag) GetCreatedAt() time.Time { return v.TagFragment.CreatedAt }

// GetUpdatedAt returns PresetFragmentTagsTag.UpdatedAt, and is useful for accessing the field via an interface.
func (v *PresetFragmentTagsTag) GetUpdatedAt() time.Time { return v.TagFragment.UpdatedAt }

// GetName returns PresetFragmentTagsTag.Name, and is useful for accessing the field via an interface.
func (v *PresetFragmentTagsTag) GetName() string { return v.TagFragment.Name }

func (v *PresetFragmentTagsTag) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PresetFragmentTagsTag
		graphql.NoUnmarshalJSON
	}
	firstPass.PresetFragmentTagsTag = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TagFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPresetFragmentTagsTag struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Name string `json:"name"`
}

func (v *PresetFragmentTagsTag) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PresetFragmentTagsTag) __premarshalJSON() (*__premarshalPresetFragmentTagsTag, error) {
	var retval __premarshalPresetFragmentTagsTag

	retval.Id = v.TagFragment.Id
	retval.CreatedAt = v.TagFragment.CreatedAt
	retval.UpdatedAt = v.TagFragment.UpdatedAt
	retval.Name = v.TagFragment.Name
	return &retval, nil
}

type PresetSearch struct {
	Limit  *int `json:"limit"`
	Offset *int `json:"offset"`
}

// GetLimit returns PresetSearch.Limit, and is useful for accessing the field via an interface.
func (v *PresetSearch) GetLimit() *int { return v.Limit }

// GetOffset returns PresetSearch.Offset, and is useful for accessing the field via an interface.
func (v *PresetSearch) GetOffset() *int { return v.Offset }

// TagFragment includes the GraphQL fields of Tag requested by the fragment TagFragment.
// The GraphQL type's documentation follows.
//
// A tag is a label that can be attached to time spans and presets.
// They can be structured in any shape or form to categorize time tracking.
type TagFragment struct {
	Id        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Name      string    `json:"name"`
}

// GetId returns TagFragment.Id, and is useful for accessing the field via an interface.
func (v *TagFragment) GetId() string { return v.Id }

// GetCreatedAt returns TagFragment.CreatedAt, and is useful for accessing the field via an interface.
func (v *TagFragment) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns TagFragment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TagFragment) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetName returns TagFragment.Name, and is useful for accessing the field via an interface.
func (v *TagFragment) GetName() string { return v.Name }

type TagSearch struct {
	Query  *string `json:"query"`
	Limit  *int    `json:"limit"`
	Offset *int    `json:"offset"`
}

// GetQuery returns TagSearch.Query, and is useful for accessing the field via an interface.
func (v *TagSearch) GetQuery() *string { return v.Query }

// GetLimit returns TagSearch.Limit, and is useful for accessing the field via an interface.
func (v *TagSearch) GetLimit() *int { return v.Limit }

// GetOffset returns TagSearch.Offset, and is useful for accessing the field via an interface.
func (v *TagSearch) GetOffset() *int { return v.Offset }

// import "../tag/tag.fragment.graphql"
type TimeSpanFragment struct {
	Id        string                     `json:"id"`
	CreatedAt time.Time                  `json:"createdAt"`
	UpdatedAt time.Time                  `json:"updatedAt"`
	Start     time.Time                  `json:"start"`
	End       *time.Time                 `json:"end"`
	Note      *string                    `json:"note"`
	Running   bool                       `json:"running"`
	Tags      []*TimeSpanFragmentTagsTag `json:"tags"`
}

// GetId returns TimeSpanFragment.Id, and is useful for accessing the field via an interface.
func (v *TimeSpanFragment) GetId() string { return v.Id }

// GetCreatedAt returns TimeSpanFragment.CreatedAt, and is useful for accessing the field via an interface.
func (v *TimeSpanFragment) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns TimeSpanFragment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TimeSpanFragment) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetStart returns TimeSpanFragment.Start, and is useful for accessing the field via an interface.
func (v *TimeSpanFragment) GetStart() time.Time { return v.Start }

// GetEnd returns TimeSpanFragment.End, and is useful for accessing the field via an interface.
func (v *TimeSpanFragment) GetEnd() *time.Time { return v.End }

// GetNote returns TimeSpanFragment.Note, and is useful for accessing the field via an interface.
func (v *TimeSpanFragment) GetNote() *string { return v.Note }

// GetRunning returns TimeSpanFragment.Running, and is useful for accessing the field via an interface.
func (v *TimeSpanFragment) GetRunning() bool { return v.Running }

// GetTags returns TimeSpanFragment.Tags, and is useful for accessing the field via an interface.
func (v *TimeSpanFragment) GetTags() []*TimeSpanFragmentTagsTag { return v.Tags }

// TimeSpanFragmentTagsTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// A tag is a label that can be attached to time spans and presets.
// They can be structured in any shape or form to categorize time tracking.
type TimeSpanFragmentTagsTag struct {
	TagFragment `json:"-"`
}

// GetId returns TimeSpanFragmentTagsTag.Id, and is useful for accessing the field via an interface.
func (v *TimeSpanFragmentTagsTag) GetId() string { return v.TagFragment.Id }

// GetCreatedAt returns TimeSpanFragmentTagsTag.CreatedAt, and is useful for accessing the field via an interface.
func (v *TimeSpanFragmentTagsTag) GetCreatedAt() time.Time { return v.TagFragment.CreatedAt }

// GetUpdatedAt returns TimeSpanFragmentTagsTag.UpdatedAt, and is useful for accessing the field via an interface.
func (v *TimeSpanFragmentTagsTag) GetUpdatedAt() time.Time { return v.TagFragment.UpdatedAt }

// GetName returns TimeSpanFragmentTagsTag.Name, and is useful for accessing the field via an interface.
func (v *TimeSpanFragmentTagsTag) GetName() string { return v.TagFragment.Name }

func (v *TimeSpanFragmentTagsTag) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TimeSpanFragmentTagsTag
		graphql.NoUnmarshalJSON
	}
	firstPass.TimeSpanFragmentTagsTag = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TagFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTimeSpanFragmentTagsTag struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Name string `json:"name"`
}

func (v *TimeSpanFragmentTagsTag) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TimeSpanFragmentTagsTag) __premarshalJSON() (*__premarshalTimeSpanFragmentTagsTag, error) {
	var retval __premarshalTimeSpanFragmentTagsTag

	retval.Id = v.TagFragment.Id
	retval.CreatedAt = v.TagFragment.CreatedAt
	retval.UpdatedAt = v.TagFragment.UpdatedAt
	retval.Name = v.TagFragment.Name
	return &retval, nil
}

type TimeSpanSearch struct {
	FromInclusive *time.Time `json:"fromInclusive"`
	ToInclusive   *time.Time `json:"toInclusive"`
	Running       *bool      `json:"running"`
	Tags          []string   `json:"tags"`
	Limit         *int       `json:"limit"`
	Offset        *int       `json:"offset"`
}

// GetFromInclusive returns TimeSpanSearch.FromInclusive, and is useful for accessing the field via an interface.
func (v *TimeSpanSearch) GetFromInclusive() *time.Time { return v.FromInclusive }

// GetToInclusive returns TimeSpanSearch.ToInclusive, and is useful for accessing the field via an interface.
func (v *TimeSpanSearch) GetToInclusive() *time.Time { return v.ToInclusive }

// GetRunning returns TimeSpanSearch.Running, and is useful for accessing the field via an interface.
func (v *TimeSpanSearch) GetRunning() *bool { return v.Running }

// GetTags returns TimeSpanSearch.Tags, and is useful for accessing the field via an interface.
func (v *TimeSpanSearch) GetTags() []string { return v.Tags }

// GetLimit returns TimeSpanSearch.Limit, and is useful for accessing the field via an interface.
func (v *TimeSpanSearch) GetLimit() *int { return v.Limit }

// GetOffset returns TimeSpanSearch.Offset, and is useful for accessing the field via an interface.
func (v *TimeSpanSearch) GetOffset() *int { return v.Offset }

type UpdatePreset struct {
	SortIndex int      `json:"sortIndex"`
	Name      string   `json:"name"`
	Tags      []string `json:"tags"`
	// Setting the note to null will remove it
	Note *string `json:"note"`
}

// GetSortIndex returns UpdatePreset.SortIndex, and is useful for accessing the field via an interface.
func (v *UpdatePreset) GetSortIndex() int { return v.SortIndex }

// GetName returns UpdatePreset.Name, and is useful for accessing the field via an interface.
func (v *UpdatePreset) GetName() string { return v.Name }

// GetTags returns UpdatePreset.Tags, and is useful for accessing the field via an interface.
func (v *UpdatePreset) GetTags() []string { return v.Tags }

// GetNote returns UpdatePreset.Note, and is useful for accessing the field via an interface.
func (v *UpdatePreset) GetNote() *string { return v.Note }

type UpdatePresetSorting struct {
	Id        string `json:"id"`
	SortIndex int    `json:"sortIndex"`
}

// GetId returns UpdatePresetSorting.Id, and is useful for accessing the field via an interface.
func (v *UpdatePresetSorting) GetId() string { return v.Id }

// GetSortIndex returns UpdatePresetSorting.SortIndex, and is useful for accessing the field via an interface.
func (v *UpdatePresetSorting) GetSortIndex() int { return v.SortIndex }

// Only non-null fields will be updated.
type UpdateTimeSpan struct {
	Start *time.Time `json:"start"`
	End   *time.Time `json:"end"`
	Note  *string    `json:"note"`
	Tags  []string   `json:"tags"`
}

// GetStart returns UpdateTimeSpan.Start, and is useful for accessing the field via an interface.
func (v *UpdateTimeSpan) GetStart() *time.Time { return v.Start }

// GetEnd returns UpdateTimeSpan.End, and is useful for accessing the field via an interface.
func (v *UpdateTimeSpan) GetEnd() *time.Time { return v.End }

// GetNote returns UpdateTimeSpan.Note, and is useful for accessing the field via an interface.
func (v *UpdateTimeSpan) GetNote() *string { return v.Note }

// GetTags returns UpdateTimeSpan.Tags, and is useful for accessing the field via an interface.
func (v *UpdateTimeSpan) GetTags() []string { return v.Tags }

// __closeTimeSpanInput is used internally by genqlient
type __closeTimeSpanInput struct {
	Id  *string    `json:"id"`
	End *time.Time `json:"end"`
}

// GetId returns __closeTimeSpanInput.Id, and is useful for accessing the field via an interface.
func (v *__closeTimeSpanInput) GetId() *string { return v.Id }

// GetEnd returns __closeTimeSpanInput.End, and is useful for accessing the field via an interface.
func (v *__closeTimeSpanInput) GetEnd() *time.Time { return v.End }

// __createPresetInput is used internally by genqlient
type __createPresetInput struct {
	Input *CreatePreset `json:"input,omitempty"`
}

// GetInput returns __createPresetInput.Input, and is useful for accessing the field via an interface.
func (v *__createPresetInput) GetInput() *CreatePreset { return v.Input }

// __createTimeSpanFromPresetInput is used internally by genqlient
type __createTimeSpanFromPresetInput struct {
	Input *CreateTimeSpanFromPreset `json:"input,omitempty"`
}

// GetInput returns __createTimeSpanFromPresetInput.Input, and is useful for accessing the field via an interface.
func (v *__createTimeSpanFromPresetInput) GetInput() *CreateTimeSpanFromPreset { return v.Input }

// __createTimeSpanInput is used internally by genqlient
type __createTimeSpanInput struct {
	Input *CreateTimeSpan `json:"input,omitempty"`
}

// GetInput returns __createTimeSpanInput.Input, and is useful for accessing the field via an interface.
func (v *__createTimeSpanInput) GetInput() *CreateTimeSpan { return v.Input }

// __deletePresetInput is used internally by genqlient
type __deletePresetInput struct {
	Id string `json:"id"`
}

// GetId returns __deletePresetInput.Id, and is useful for accessing the field via an interface.
func (v *__deletePresetInput) GetId() string { return v.Id }

// __deleteTimeSpanInput is used internally by genqlient
type __deleteTimeSpanInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteTimeSpanInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteTimeSpanInput) GetId() string { return v.Id }

// __presetInput is used internally by genqlient
type __presetInput struct {
	Id string `json:"id"`
}

// GetId returns __presetInput.Id, and is useful for accessing the field via an interface.
func (v *__presetInput) GetId() string { return v.Id }

// __presetsInput is used internally by genqlient
type __presetsInput struct {
	Search *PresetSearch `json:"search,omitempty"`
}

// GetSearch returns __presetsInput.Search, and is useful for accessing the field via an interface.
func (v *__presetsInput) GetSearch() *PresetSearch { return v.Search }

// __tagsInput is used internally by genqlient
type __tagsInput struct {
	Search *TagSearch `json:"search,omitempty"`
}

// GetSearch returns __tagsInput.Search, and is useful for accessing the field via an interface.
func (v *__tagsInput) GetSearch() *TagSearch { return v.Search }

// __timeSpanInput is used internally by genqlient
type __timeSpanInput struct {
	Id string `json:"id"`
}

// GetId returns __timeSpanInput.Id, and is useful for accessing the field via an interface.
func (v *__timeSpanInput) GetId() string { return v.Id }

// __timeSpansInput is used internally by genqlient
type __timeSpansInput struct {
	Search *TimeSpanSearch `json:"search,omitempty"`
}

// GetSearch returns __timeSpansInput.Search, and is useful for accessing the field via an interface.
func (v *__timeSpansInput) GetSearch() *TimeSpanSearch { return v.Search }

// __updatePresetInput is used internally by genqlient
type __updatePresetInput struct {
	Id    string        `json:"id"`
	Input *UpdatePreset `json:"input,omitempty"`
}

// GetId returns __updatePresetInput.Id, and is useful for accessing the field via an interface.
func (v *__updatePresetInput) GetId() string { return v.Id }

// GetInput returns __updatePresetInput.Input, and is useful for accessing the field via an interface.
func (v *__updatePresetInput) GetInput() *UpdatePreset { return v.Input }

// __updatePresetSortingInput is used internally by genqlient
type __updatePresetSortingInput struct {
	Input []*UpdatePresetSorting `json:"input,omitempty"`
}

// GetInput returns __updatePresetSortingInput.Input, and is useful for accessing the field via an interface.
func (v *__updatePresetSortingInput) GetInput() []*UpdatePresetSorting { return v.Input }

// __updateTimeSpanInput is used internally by genqlient
type __updateTimeSpanInput struct {
	Id    string          `json:"id"`
	Input *UpdateTimeSpan `json:"input,omitempty"`
}

// GetId returns __updateTimeSpanInput.Id, and is useful for accessing the field via an interface.
func (v *__updateTimeSpanInput) GetId() string { return v.Id }

// GetInput returns __updateTimeSpanInput.Input, and is useful for accessing the field via an interface.
func (v *__updateTimeSpanInput) GetInput() *UpdateTimeSpan { return v.Input }

// closeTimeSpanCloseTimeSpan includes the requested fields of the GraphQL type TimeSpan.
// The GraphQL type's documentation follows.
//
// A time span is a period of time between a start and an end time.
// Time spans can be tagged to categorize time tracking.
type closeTimeSpanCloseTimeSpan struct {
	TimeSpanFragment `json:"-"`
}

// GetId returns closeTimeSpanCloseTimeSpan.Id, and is useful for accessing the field via an interface.
func (v *closeTimeSpanCloseTimeSpan) GetId() string { return v.TimeSpanFragment.Id }

// GetCreatedAt returns closeTimeSpanCloseTimeSpan.CreatedAt, and is useful for accessing the field via an interface.
func (v *closeTimeSpanCloseTimeSpan) GetCreatedAt() time.Time { return v.TimeSpanFragment.CreatedAt }

// GetUpdatedAt returns closeTimeSpanCloseTimeSpan.UpdatedAt, and is useful for accessing the field via an interface.
func (v *closeTimeSpanCloseTimeSpan) GetUpdatedAt() time.Time { return v.TimeSpanFragment.UpdatedAt }

// GetStart returns closeTimeSpanCloseTimeSpan.Start, and is useful for accessing the field via an interface.
func (v *closeTimeSpanCloseTimeSpan) GetStart() time.Time { return v.TimeSpanFragment.Start }

// GetEnd returns closeTimeSpanCloseTimeSpan.End, and is useful for accessing the field via an interface.
func (v *closeTimeSpanCloseTimeSpan) GetEnd() *time.Time { return v.TimeSpanFragment.End }

// GetNote returns closeTimeSpanCloseTimeSpan.Note, and is useful for accessing the field via an interface.
func (v *closeTimeSpanCloseTimeSpan) GetNote() *string { return v.TimeSpanFragment.Note }

// GetRunning returns closeTimeSpanCloseTimeSpan.Running, and is useful for accessing the field via an interface.
func (v *closeTimeSpanCloseTimeSpan) GetRunning() bool { return v.TimeSpanFragment.Running }

// GetTags returns closeTimeSpanCloseTimeSpan.Tags, and is useful for accessing the field via an interface.
func (v *closeTimeSpanCloseTimeSpan) GetTags() []*TimeSpanFragmentTagsTag {
	return v.TimeSpanFragment.Tags
}

func (v *closeTimeSpanCloseTimeSpan) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*closeTimeSpanCloseTimeSpan
		graphql.NoUnmarshalJSON
	}
	firstPass.closeTimeSpanCloseTimeSpan = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TimeSpanFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcloseTimeSpanCloseTimeSpan struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Start time.Time `json:"start"`

	End *time.Time `json:"end"`

	Note *string `json:"note"`

	Running bool `json:"running"`

	Tags []*TimeSpanFragmentTagsTag `json:"tags"`
}

func (v *closeTimeSpanCloseTimeSpan) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *closeTimeSpanCloseTimeSpan) __premarshalJSON() (*__premarshalcloseTimeSpanCloseTimeSpan, error) {
	var retval __premarshalcloseTimeSpanCloseTimeSpan

	retval.Id = v.TimeSpanFragment.Id
	retval.CreatedAt = v.TimeSpanFragment.CreatedAt
	retval.UpdatedAt = v.TimeSpanFragment.UpdatedAt
	retval.Start = v.TimeSpanFragment.Start
	retval.End = v.TimeSpanFragment.End
	retval.Note = v.TimeSpanFragment.Note
	retval.Running = v.TimeSpanFragment.Running
	retval.Tags = v.TimeSpanFragment.Tags
	return &retval, nil
}

// closeTimeSpanResponse is returned by closeTimeSpan on success.
type closeTimeSpanResponse struct {
	// Close a time span that does not have an end time yet.
	// When invoked without id it will close the time span that is running longest.
	// Optionally you can provide an end time to close the time span at a specific time.
	CloseTimeSpan *closeTimeSpanCloseTimeSpan `json:"closeTimeSpan"`
}

// GetCloseTimeSpan returns closeTimeSpanResponse.CloseTimeSpan, and is useful for accessing the field via an interface.
func (v *closeTimeSpanResponse) GetCloseTimeSpan() *closeTimeSpanCloseTimeSpan {
	return v.CloseTimeSpan
}

// createPresetCreatePreset includes the requested fields of the GraphQL type Preset.
// The GraphQL type's documentation follows.
//
// A preset is a template for time spans.
type createPresetCreatePreset struct {
	PresetFragment `json:"-"`
}

// GetId returns createPresetCreatePreset.Id, and is useful for accessing the field via an interface.
func (v *createPresetCreatePreset) GetId() string { return v.PresetFragment.Id }

// GetCreatedAt returns createPresetCreatePreset.CreatedAt, and is useful for accessing the field via an interface.
func (v *createPresetCreatePreset) GetCreatedAt() time.Time { return v.PresetFragment.CreatedAt }

// GetUpdatedAt returns createPresetCreatePreset.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createPresetCreatePreset) GetUpdatedAt() time.Time { return v.PresetFragment.UpdatedAt }

// GetSortIndex returns createPresetCreatePreset.SortIndex, and is useful for accessing the field via an interface.
func (v *createPresetCreatePreset) GetSortIndex() int { return v.PresetFragment.SortIndex }

// GetName returns createPresetCreatePreset.Name, and is useful for accessing the field via an interface.
func (v *createPresetCreatePreset) GetName() string { return v.PresetFragment.Name }

// GetNote returns createPresetCreatePreset.Note, and is useful for accessing the field via an interface.
func (v *createPresetCreatePreset) GetNote() *string { return v.PresetFragment.Note }

// GetTags returns createPresetCreatePreset.Tags, and is useful for accessing the field via an interface.
func (v *createPresetCreatePreset) GetTags() []*PresetFragmentTagsTag { return v.PresetFragment.Tags }

func (v *createPresetCreatePreset) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createPresetCreatePreset
		graphql.NoUnmarshalJSON
	}
	firstPass.createPresetCreatePreset = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PresetFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreatePresetCreatePreset struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	SortIndex int `json:"sortIndex"`

	Name string `json:"name"`

	Note *string `json:"note"`

	Tags []*PresetFragmentTagsTag `json:"tags"`
}

func (v *createPresetCreatePreset) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createPresetCreatePreset) __premarshalJSON() (*__premarshalcreatePresetCreatePreset, error) {
	var retval __premarshalcreatePresetCreatePreset

	retval.Id = v.PresetFragment.Id
	retval.CreatedAt = v.PresetFragment.CreatedAt
	retval.UpdatedAt = v.PresetFragment.UpdatedAt
	retval.SortIndex = v.PresetFragment.SortIndex
	retval.Name = v.PresetFragment.Name
	retval.Note = v.PresetFragment.Note
	retval.Tags = v.PresetFragment.Tags
	return &retval, nil
}

// createPresetResponse is returned by createPreset on success.
type createPresetResponse struct {
	// Create a new preset.
	// Presets are templates for time spans.
	CreatePreset *createPresetCreatePreset `json:"createPreset"`
}

// GetCreatePreset returns createPresetResponse.CreatePreset, and is useful for accessing the field via an interface.
func (v *createPresetResponse) GetCreatePreset() *createPresetCreatePreset { return v.CreatePreset }

// createTimeSpanCreateTimeSpan includes the requested fields of the GraphQL type TimeSpan.
// The GraphQL type's documentation follows.
//
// A time span is a period of time between a start and an end time.
// Time spans can be tagged to categorize time tracking.
type createTimeSpanCreateTimeSpan struct {
	TimeSpanFragment `json:"-"`
}

// GetId returns createTimeSpanCreateTimeSpan.Id, and is useful for accessing the field via an interface.
func (v *createTimeSpanCreateTimeSpan) GetId() string { return v.TimeSpanFragment.Id }

// GetCreatedAt returns createTimeSpanCreateTimeSpan.CreatedAt, and is useful for accessing the field via an interface.
func (v *createTimeSpanCreateTimeSpan) GetCreatedAt() time.Time { return v.TimeSpanFragment.CreatedAt }

// GetUpdatedAt returns createTimeSpanCreateTimeSpan.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createTimeSpanCreateTimeSpan) GetUpdatedAt() time.Time { return v.TimeSpanFragment.UpdatedAt }

// GetStart returns createTimeSpanCreateTimeSpan.Start, and is useful for accessing the field via an interface.
func (v *createTimeSpanCreateTimeSpan) GetStart() time.Time { return v.TimeSpanFragment.Start }

// GetEnd returns createTimeSpanCreateTimeSpan.End, and is useful for accessing the field via an interface.
func (v *createTimeSpanCreateTimeSpan) GetEnd() *time.Time { return v.TimeSpanFragment.End }

// GetNote returns createTimeSpanCreateTimeSpan.Note, and is useful for accessing the field via an interface.
func (v *createTimeSpanCreateTimeSpan) GetNote() *string { return v.TimeSpanFragment.Note }

// GetRunning returns createTimeSpanCreateTimeSpan.Running, and is useful for accessing the field via an interface.
func (v *createTimeSpanCreateTimeSpan) GetRunning() bool { return v.TimeSpanFragment.Running }

// GetTags returns createTimeSpanCreateTimeSpan.Tags, and is useful for accessing the field via an interface.
func (v *createTimeSpanCreateTimeSpan) GetTags() []*TimeSpanFragmentTagsTag {
	return v.TimeSpanFragment.Tags
}

func (v *createTimeSpanCreateTimeSpan) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createTimeSpanCreateTimeSpan
		graphql.NoUnmarshalJSON
	}
	firstPass.createTimeSpanCreateTimeSpan = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TimeSpanFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateTimeSpanCreateTimeSpan struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Start time.Time `json:"start"`

	End *time.Time `json:"end"`

	Note *string `json:"note"`

	Running bool `json:"running"`

	Tags []*TimeSpanFragmentTagsTag `json:"tags"`
}

func (v *createTimeSpanCreateTimeSpan) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createTimeSpanCreateTimeSpan) __premarshalJSON() (*__premarshalcreateTimeSpanCreateTimeSpan, error) {
	var retval __premarshalcreateTimeSpanCreateTimeSpan

	retval.Id = v.TimeSpanFragment.Id
	retval.CreatedAt = v.TimeSpanFragment.CreatedAt
	retval.UpdatedAt = v.TimeSpanFragment.UpdatedAt
	retval.Start = v.TimeSpanFragment.Start
	retval.End = v.TimeSpanFragment.End
	retval.Note = v.TimeSpanFragment.Note
	retval.Running = v.TimeSpanFragment.Running
	retval.Tags = v.TimeSpanFragment.Tags
	return &retval, nil
}

// createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan includes the requested fields of the GraphQL type TimeSpan.
// The GraphQL type's documentation follows.
//
// A time span is a period of time between a start and an end time.
// Time spans can be tagged to categorize time tracking.
type createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan struct {
	TimeSpanFragment `json:"-"`
}

// GetId returns createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan.Id, and is useful for accessing the field via an interface.
func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) GetId() string {
	return v.TimeSpanFragment.Id
}

// GetCreatedAt returns createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan.CreatedAt, and is useful for accessing the field via an interface.
func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) GetCreatedAt() time.Time {
	return v.TimeSpanFragment.CreatedAt
}

// GetUpdatedAt returns createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) GetUpdatedAt() time.Time {
	return v.TimeSpanFragment.UpdatedAt
}

// GetStart returns createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan.Start, and is useful for accessing the field via an interface.
func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) GetStart() time.Time {
	return v.TimeSpanFragment.Start
}

// GetEnd returns createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan.End, and is useful for accessing the field via an interface.
func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) GetEnd() *time.Time {
	return v.TimeSpanFragment.End
}

// GetNote returns createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan.Note, and is useful for accessing the field via an interface.
func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) GetNote() *string {
	return v.TimeSpanFragment.Note
}

// GetRunning returns createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan.Running, and is useful for accessing the field via an interface.
func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) GetRunning() bool {
	return v.TimeSpanFragment.Running
}

// GetTags returns createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan.Tags, and is useful for accessing the field via an interface.
func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) GetTags() []*TimeSpanFragmentTagsTag {
	return v.TimeSpanFragment.Tags
}

func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan
		graphql.NoUnmarshalJSON
	}
	firstPass.createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TimeSpanFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Start time.Time `json:"start"`

	End *time.Time `json:"end"`

	Note *string `json:"note"`

	Running bool `json:"running"`

	Tags []*TimeSpanFragmentTagsTag `json:"tags"`
}

func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan) __premarshalJSON() (*__premarshalcreateTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan, error) {
	var retval __premarshalcreateTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan

	retval.Id = v.TimeSpanFragment.Id
	retval.CreatedAt = v.TimeSpanFragment.CreatedAt
	retval.UpdatedAt = v.TimeSpanFragment.UpdatedAt
	retval.Start = v.TimeSpanFragment.Start
	retval.End = v.TimeSpanFragment.End
	retval.Note = v.TimeSpanFragment.Note
	retval.Running = v.TimeSpanFragment.Running
	retval.Tags = v.TimeSpanFragment.Tags
	return &retval, nil
}

// createTimeSpanFromPresetResponse is returned by createTimeSpanFromPreset on success.
type createTimeSpanFromPresetResponse struct {
	// Create a new time span from a preset
	CreateTimeSpanFromPreset *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan `json:"createTimeSpanFromPreset"`
}

// GetCreateTimeSpanFromPreset returns createTimeSpanFromPresetResponse.CreateTimeSpanFromPreset, and is useful for accessing the field via an interface.
func (v *createTimeSpanFromPresetResponse) GetCreateTimeSpanFromPreset() *createTimeSpanFromPresetCreateTimeSpanFromPresetTimeSpan {
	return v.CreateTimeSpanFromPreset
}

// createTimeSpanResponse is returned by createTimeSpan on success.
type createTimeSpanResponse struct {
	// Create a new time span
	CreateTimeSpan *createTimeSpanCreateTimeSpan `json:"createTimeSpan"`
}

// GetCreateTimeSpan returns createTimeSpanResponse.CreateTimeSpan, and is useful for accessing the field via an interface.
func (v *createTimeSpanResponse) GetCreateTimeSpan() *createTimeSpanCreateTimeSpan {
	return v.CreateTimeSpan
}

// deletePresetResponse is returned by deletePreset on success.
type deletePresetResponse struct {
	// Delete a preset by id.
	// Time spans that were created from this preset will not be deleted.
	DeletePreset bool `json:"deletePreset"`
}

// GetDeletePreset returns deletePresetResponse.DeletePreset, and is useful for accessing the field via an interface.
func (v *deletePresetResponse) GetDeletePreset() bool { return v.DeletePreset }

// deleteTimeSpanResponse is returned by deleteTimeSpan on success.
type deleteTimeSpanResponse struct {
	// Delete a time span by id
	DeleteTimeSpan bool `json:"deleteTimeSpan"`
}

// GetDeleteTimeSpan returns deleteTimeSpanResponse.DeleteTimeSpan, and is useful for accessing the field via an interface.
func (v *deleteTimeSpanResponse) GetDeleteTimeSpan() bool { return v.DeleteTimeSpan }

// meMeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is a person that has full access to Zeitraum.
type meMeUser struct {
	Id        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Username  string    `json:"username"`
}

// GetId returns meMeUser.Id, and is useful for accessing the field via an interface.
func (v *meMeUser) GetId() string { return v.Id }

// GetCreatedAt returns meMeUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *meMeUser) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns meMeUser.UpdatedAt, and is useful for accessing the field via an interface.
func (v *meMeUser) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUsername returns meMeUser.Username, and is useful for accessing the field via an interface.
func (v *meMeUser) GetUsername() string { return v.Username }

// meResponse is returned by me on success.
type meResponse struct {
	// Get the currently authenticated user.
	// Currently Zeitraum supports single-user only.
	Me *meMeUser `json:"me"`
}

// GetMe returns meResponse.Me, and is useful for accessing the field via an interface.
func (v *meResponse) GetMe() *meMeUser { return v.Me }

// presetPreset includes the requested fields of the GraphQL type Preset.
// The GraphQL type's documentation follows.
//
// A preset is a template for time spans.
type presetPreset struct {
	PresetFragment `json:"-"`
}

// GetId returns presetPreset.Id, and is useful for accessing the field via an interface.
func (v *presetPreset) GetId() string { return v.PresetFragment.Id }

// GetCreatedAt returns presetPreset.CreatedAt, and is useful for accessing the field via an interface.
func (v *presetPreset) GetCreatedAt() time.Time { return v.PresetFragment.CreatedAt }

// GetUpdatedAt returns presetPreset.UpdatedAt, and is useful for accessing the field via an interface.
func (v *presetPreset) GetUpdatedAt() time.Time { return v.PresetFragment.UpdatedAt }

// GetSortIndex returns presetPreset.SortIndex, and is useful for accessing the field via an interface.
func (v *presetPreset) GetSortIndex() int { return v.PresetFragment.SortIndex }

// GetName returns presetPreset.Name, and is useful for accessing the field via an interface.
func (v *presetPreset) GetName() string { return v.PresetFragment.Name }

// GetNote returns presetPreset.Note, and is useful for accessing the field via an interface.
func (v *presetPreset) GetNote() *string { return v.PresetFragment.Note }

// GetTags returns presetPreset.Tags, and is useful for accessing the field via an interface.
func (v *presetPreset) GetTags() []*PresetFragmentTagsTag { return v.PresetFragment.Tags }

func (v *presetPreset) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*presetPreset
		graphql.NoUnmarshalJSON
	}
	firstPass.presetPreset = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PresetFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpresetPreset struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	SortIndex int `json:"sortIndex"`

	Name string `json:"name"`

	Note *string `json:"note"`

	Tags []*PresetFragmentTagsTag `json:"tags"`
}

func (v *presetPreset) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *presetPreset) __premarshalJSON() (*__premarshalpresetPreset, error) {
	var retval __premarshalpresetPreset

	retval.Id = v.PresetFragment.Id
	retval.CreatedAt = v.PresetFragment.CreatedAt
	retval.UpdatedAt = v.PresetFragment.UpdatedAt
	retval.SortIndex = v.PresetFragment.SortIndex
	retval.Name = v.PresetFragment.Name
	retval.Note = v.PresetFragment.Note
	retval.Tags = v.PresetFragment.Tags
	return &retval, nil
}

// presetResponse is returned by preset on success.
type presetResponse struct {
	// Get a preset by id
	Preset *presetPreset `json:"preset"`
}

// GetPreset returns presetResponse.Preset, and is useful for accessing the field via an interface.
func (v *presetResponse) GetPreset() *presetPreset { return v.Preset }

// presetsPresetsPresetList includes the requested fields of the GraphQL type PresetList.
type presetsPresetsPresetList struct {
	Total int                                    `json:"total"`
	Items []*presetsPresetsPresetListItemsPreset `json:"items"`
}

// GetTotal returns presetsPresetsPresetList.Total, and is useful for accessing the field via an interface.
func (v *presetsPresetsPresetList) GetTotal() int { return v.Total }

// GetItems returns presetsPresetsPresetList.Items, and is useful for accessing the field via an interface.
func (v *presetsPresetsPresetList) GetItems() []*presetsPresetsPresetListItemsPreset { return v.Items }

// presetsPresetsPresetListItemsPreset includes the requested fields of the GraphQL type Preset.
// The GraphQL type's documentation follows.
//
// A preset is a template for time spans.
type presetsPresetsPresetListItemsPreset struct {
	PresetFragment `json:"-"`
}

// GetId returns presetsPresetsPresetListItemsPreset.Id, and is useful for accessing the field via an interface.
func (v *presetsPresetsPresetListItemsPreset) GetId() string { return v.PresetFragment.Id }

// GetCreatedAt returns presetsPresetsPresetListItemsPreset.CreatedAt, and is useful for accessing the field via an interface.
func (v *presetsPresetsPresetListItemsPreset) GetCreatedAt() time.Time {
	return v.PresetFragment.CreatedAt
}

// GetUpdatedAt returns presetsPresetsPresetListItemsPreset.UpdatedAt, and is useful for accessing the field via an interface.
func (v *presetsPresetsPresetListItemsPreset) GetUpdatedAt() time.Time {
	return v.PresetFragment.UpdatedAt
}

// GetSortIndex returns presetsPresetsPresetListItemsPreset.SortIndex, and is useful for accessing the field via an interface.
func (v *presetsPresetsPresetListItemsPreset) GetSortIndex() int { return v.PresetFragment.SortIndex }

// GetName returns presetsPresetsPresetListItemsPreset.Name, and is useful for accessing the field via an interface.
func (v *presetsPresetsPresetListItemsPreset) GetName() string { return v.PresetFragment.Name }

// GetNote returns presetsPresetsPresetListItemsPreset.Note, and is useful for accessing the field via an interface.
func (v *presetsPresetsPresetListItemsPreset) GetNote() *string { return v.PresetFragment.Note }

// GetTags returns presetsPresetsPresetListItemsPreset.Tags, and is useful for accessing the field via an interface.
func (v *presetsPresetsPresetListItemsPreset) GetTags() []*PresetFragmentTagsTag {
	return v.PresetFragment.Tags
}

func (v *presetsPresetsPresetListItemsPreset) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*presetsPresetsPresetListItemsPreset
		graphql.NoUnmarshalJSON
	}
	firstPass.presetsPresetsPresetListItemsPreset = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PresetFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpresetsPresetsPresetListItemsPreset struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	SortIndex int `json:"sortIndex"`

	Name string `json:"name"`

	Note *string `json:"note"`

	Tags []*PresetFragmentTagsTag `json:"tags"`
}

func (v *presetsPresetsPresetListItemsPreset) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *presetsPresetsPresetListItemsPreset) __premarshalJSON() (*__premarshalpresetsPresetsPresetListItemsPreset, error) {
	var retval __premarshalpresetsPresetsPresetListItemsPreset

	retval.Id = v.PresetFragment.Id
	retval.CreatedAt = v.PresetFragment.CreatedAt
	retval.UpdatedAt = v.PresetFragment.UpdatedAt
	retval.SortIndex = v.PresetFragment.SortIndex
	retval.Name = v.PresetFragment.Name
	retval.Note = v.PresetFragment.Note
	retval.Tags = v.PresetFragment.Tags
	return &retval, nil
}

// presetsResponse is returned by presets on success.
type presetsResponse struct {
	// Get all presets.
	// Presets are sorted by sortIndex in descending order.
	// Use the sortIndex to change the order of presets.
	Presets *presetsPresetsPresetList `json:"presets"`
}

// GetPresets returns presetsResponse.Presets, and is useful for accessing the field via an interface.
func (v *presetsResponse) GetPresets() *presetsPresetsPresetList { return v.Presets }

// tagsResponse is returned by tags on success.
type tagsResponse struct {
	// Get all tags.
	// Tags are sorted by name in ascending order.
	Tags *tagsTagsTagList `json:"tags"`
}

// GetTags returns tagsResponse.Tags, and is useful for accessing the field via an interface.
func (v *tagsResponse) GetTags() *tagsTagsTagList { return v.Tags }

// tagsTagsTagList includes the requested fields of the GraphQL type TagList.
type tagsTagsTagList struct {
	Total int                        `json:"total"`
	Items []*tagsTagsTagListItemsTag `json:"items"`
}

// GetTotal returns tagsTagsTagList.Total, and is useful for accessing the field via an interface.
func (v *tagsTagsTagList) GetTotal() int { return v.Total }

// GetItems returns tagsTagsTagList.Items, and is useful for accessing the field via an interface.
func (v *tagsTagsTagList) GetItems() []*tagsTagsTagListItemsTag { return v.Items }

// tagsTagsTagListItemsTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// A tag is a label that can be attached to time spans and presets.
// They can be structured in any shape or form to categorize time tracking.
type tagsTagsTagListItemsTag struct {
	TagFragment `json:"-"`
}

// GetId returns tagsTagsTagListItemsTag.Id, and is useful for accessing the field via an interface.
func (v *tagsTagsTagListItemsTag) GetId() string { return v.TagFragment.Id }

// GetCreatedAt returns tagsTagsTagListItemsTag.CreatedAt, and is useful for accessing the field via an interface.
func (v *tagsTagsTagListItemsTag) GetCreatedAt() time.Time { return v.TagFragment.CreatedAt }

// GetUpdatedAt returns tagsTagsTagListItemsTag.UpdatedAt, and is useful for accessing the field via an interface.
func (v *tagsTagsTagListItemsTag) GetUpdatedAt() time.Time { return v.TagFragment.UpdatedAt }

// GetName returns tagsTagsTagListItemsTag.Name, and is useful for accessing the field via an interface.
func (v *tagsTagsTagListItemsTag) GetName() string { return v.TagFragment.Name }

func (v *tagsTagsTagListItemsTag) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*tagsTagsTagListItemsTag
		graphql.NoUnmarshalJSON
	}
	firstPass.tagsTagsTagListItemsTag = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TagFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaltagsTagsTagListItemsTag struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Name string `json:"name"`
}

func (v *tagsTagsTagListItemsTag) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *tagsTagsTagListItemsTag) __premarshalJSON() (*__premarshaltagsTagsTagListItemsTag, error) {
	var retval __premarshaltagsTagsTagListItemsTag

	retval.Id = v.TagFragment.Id
	retval.CreatedAt = v.TagFragment.CreatedAt
	retval.UpdatedAt = v.TagFragment.UpdatedAt
	retval.Name = v.TagFragment.Name
	return &retval, nil
}

// timeSpanResponse is returned by timeSpan on success.
type timeSpanResponse struct {
	// Get a time span by id
	TimeSpan *timeSpanTimeSpan `json:"timeSpan"`
}

// GetTimeSpan returns timeSpanResponse.TimeSpan, and is useful for accessing the field via an interface.
func (v *timeSpanResponse) GetTimeSpan() *timeSpanTimeSpan { return v.TimeSpan }

// timeSpanTimeSpan includes the requested fields of the GraphQL type TimeSpan.
// The GraphQL type's documentation follows.
//
// A time span is a period of time between a start and an end time.
// Time spans can be tagged to categorize time tracking.
type timeSpanTimeSpan struct {
	TimeSpanFragment `json:"-"`
}

// GetId returns timeSpanTimeSpan.Id, and is useful for accessing the field via an interface.
func (v *timeSpanTimeSpan) GetId() string { return v.TimeSpanFragment.Id }

// GetCreatedAt returns timeSpanTimeSpan.CreatedAt, and is useful for accessing the field via an interface.
func (v *timeSpanTimeSpan) GetCreatedAt() time.Time { return v.TimeSpanFragment.CreatedAt }

// GetUpdatedAt returns timeSpanTimeSpan.UpdatedAt, and is useful for accessing the field via an interface.
func (v *timeSpanTimeSpan) GetUpdatedAt() time.Time { return v.TimeSpanFragment.UpdatedAt }

// GetStart returns timeSpanTimeSpan.Start, and is useful for accessing the field via an interface.
func (v *timeSpanTimeSpan) GetStart() time.Time { return v.TimeSpanFragment.Start }

// GetEnd returns timeSpanTimeSpan.End, and is useful for accessing the field via an interface.
func (v *timeSpanTimeSpan) GetEnd() *time.Time { return v.TimeSpanFragment.End }

// GetNote returns timeSpanTimeSpan.Note, and is useful for accessing the field via an interface.
func (v *timeSpanTimeSpan) GetNote() *string { return v.TimeSpanFragment.Note }

// GetRunning returns timeSpanTimeSpan.Running, and is useful for accessing the field via an interface.
func (v *timeSpanTimeSpan) GetRunning() bool { return v.TimeSpanFragment.Running }

// GetTags returns timeSpanTimeSpan.Tags, and is useful for accessing the field via an interface.
func (v *timeSpanTimeSpan) GetTags() []*TimeSpanFragmentTagsTag { return v.TimeSpanFragment.Tags }

func (v *timeSpanTimeSpan) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*timeSpanTimeSpan
		graphql.NoUnmarshalJSON
	}
	firstPass.timeSpanTimeSpan = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TimeSpanFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaltimeSpanTimeSpan struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Start time.Time `json:"start"`

	End *time.Time `json:"end"`

	Note *string `json:"note"`

	Running bool `json:"running"`

	Tags []*TimeSpanFragmentTagsTag `json:"tags"`
}

func (v *timeSpanTimeSpan) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *timeSpanTimeSpan) __premarshalJSON() (*__premarshaltimeSpanTimeSpan, error) {
	var retval __premarshaltimeSpanTimeSpan

	retval.Id = v.TimeSpanFragment.Id
	retval.CreatedAt = v.TimeSpanFragment.CreatedAt
	retval.UpdatedAt = v.TimeSpanFragment.UpdatedAt
	retval.Start = v.TimeSpanFragment.Start
	retval.End = v.TimeSpanFragment.End
	retval.Note = v.TimeSpanFragment.Note
	retval.Running = v.TimeSpanFragment.Running
	retval.Tags = v.TimeSpanFragment.Tags
	return &retval, nil
}

// timeSpansResponse is returned by timeSpans on success.
type timeSpansResponse struct {
	// Get all time spans.
	// Time spans are sorted by start time in descending order.
	TimeSpans *timeSpansTimeSpansTimeSpanList `json:"timeSpans"`
}

// GetTimeSpans returns timeSpansResponse.TimeSpans, and is useful for accessing the field via an interface.
func (v *timeSpansResponse) GetTimeSpans() *timeSpansTimeSpansTimeSpanList { return v.TimeSpans }

// timeSpansTimeSpansTimeSpanList includes the requested fields of the GraphQL type TimeSpanList.
type timeSpansTimeSpansTimeSpanList struct {
	Total int                                            `json:"total"`
	Items []*timeSpansTimeSpansTimeSpanListItemsTimeSpan `json:"items"`
}

// GetTotal returns timeSpansTimeSpansTimeSpanList.Total, and is useful for accessing the field via an interface.
func (v *timeSpansTimeSpansTimeSpanList) GetTotal() int { return v.Total }

// GetItems returns timeSpansTimeSpansTimeSpanList.Items, and is useful for accessing the field via an interface.
func (v *timeSpansTimeSpansTimeSpanList) GetItems() []*timeSpansTimeSpansTimeSpanListItemsTimeSpan {
	return v.Items
}

// timeSpansTimeSpansTimeSpanListItemsTimeSpan includes the requested fields of the GraphQL type TimeSpan.
// The GraphQL type's documentation follows.
//
// A time span is a period of time between a start and an end time.
// Time spans can be tagged to categorize time tracking.
type timeSpansTimeSpansTimeSpanListItemsTimeSpan struct {
	TimeSpanFragment `json:"-"`
}

// GetId returns timeSpansTimeSpansTimeSpanListItemsTimeSpan.Id, and is useful for accessing the field via an interface.
func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) GetId() string { return v.TimeSpanFragment.Id }

// GetCreatedAt returns timeSpansTimeSpansTimeSpanListItemsTimeSpan.CreatedAt, and is useful for accessing the field via an interface.
func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) GetCreatedAt() time.Time {
	return v.TimeSpanFragment.CreatedAt
}

// GetUpdatedAt returns timeSpansTimeSpansTimeSpanListItemsTimeSpan.UpdatedAt, and is useful for accessing the field via an interface.
func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) GetUpdatedAt() time.Time {
	return v.TimeSpanFragment.UpdatedAt
}

// GetStart returns timeSpansTimeSpansTimeSpanListItemsTimeSpan.Start, and is useful for accessing the field via an interface.
func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) GetStart() time.Time {
	return v.TimeSpanFragment.Start
}

// GetEnd returns timeSpansTimeSpansTimeSpanListItemsTimeSpan.End, and is useful for accessing the field via an interface.
func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) GetEnd() *time.Time {
	return v.TimeSpanFragment.End
}

// GetNote returns timeSpansTimeSpansTimeSpanListItemsTimeSpan.Note, and is useful for accessing the field via an interface.
func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) GetNote() *string {
	return v.TimeSpanFragment.Note
}

// GetRunning returns timeSpansTimeSpansTimeSpanListItemsTimeSpan.Running, and is useful for accessing the field via an interface.
func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) GetRunning() bool {
	return v.TimeSpanFragment.Running
}

// GetTags returns timeSpansTimeSpansTimeSpanListItemsTimeSpan.Tags, and is useful for accessing the field via an interface.
func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) GetTags() []*TimeSpanFragmentTagsTag {
	return v.TimeSpanFragment.Tags
}

func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*timeSpansTimeSpansTimeSpanListItemsTimeSpan
		graphql.NoUnmarshalJSON
	}
	firstPass.timeSpansTimeSpansTimeSpanListItemsTimeSpan = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TimeSpanFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaltimeSpansTimeSpansTimeSpanListItemsTimeSpan struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Start time.Time `json:"start"`

	End *time.Time `json:"end"`

	Note *string `json:"note"`

	Running bool `json:"running"`

	Tags []*TimeSpanFragmentTagsTag `json:"tags"`
}

func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *timeSpansTimeSpansTimeSpanListItemsTimeSpan) __premarshalJSON() (*__premarshaltimeSpansTimeSpansTimeSpanListItemsTimeSpan, error) {
	var retval __premarshaltimeSpansTimeSpansTimeSpanListItemsTimeSpan

	retval.Id = v.TimeSpanFragment.Id
	retval.CreatedAt = v.TimeSpanFragment.CreatedAt
	retval.UpdatedAt = v.TimeSpanFragment.UpdatedAt
	retval.Start = v.TimeSpanFragment.Start
	retval.End = v.TimeSpanFragment.End
	retval.Note = v.TimeSpanFragment.Note
	retval.Running = v.TimeSpanFragment.Running
	retval.Tags = v.TimeSpanFragment.Tags
	return &retval, nil
}

// updatePresetResponse is returned by updatePreset on success.
type updatePresetResponse struct {
	// Update a preset by id
	UpdatePreset *updatePresetUpdatePreset `json:"updatePreset"`
}

// GetUpdatePreset returns updatePresetResponse.UpdatePreset, and is useful for accessing the field via an interface.
func (v *updatePresetResponse) GetUpdatePreset() *updatePresetUpdatePreset { return v.UpdatePreset }

// updatePresetSortingResponse is returned by updatePresetSorting on success.
type updatePresetSortingResponse struct {
	// Update the sort order of multiple presets at once
	UpdatePresetSorting []*updatePresetSortingUpdatePresetSortingPreset `json:"updatePresetSorting"`
}

// GetUpdatePresetSorting returns updatePresetSortingResponse.UpdatePresetSorting, and is useful for accessing the field via an interface.
func (v *updatePresetSortingResponse) GetUpdatePresetSorting() []*updatePresetSortingUpdatePresetSortingPreset {
	return v.UpdatePresetSorting
}

// updatePresetSortingUpdatePresetSortingPreset includes the requested fields of the GraphQL type Preset.
// The GraphQL type's documentation follows.
//
// A preset is a template for time spans.
type updatePresetSortingUpdatePresetSortingPreset struct {
	PresetFragment `json:"-"`
}

// GetId returns updatePresetSortingUpdatePresetSortingPreset.Id, and is useful for accessing the field via an interface.
func (v *updatePresetSortingUpdatePresetSortingPreset) GetId() string { return v.PresetFragment.Id }

// GetCreatedAt returns updatePresetSortingUpdatePresetSortingPreset.CreatedAt, and is useful for accessing the field via an interface.
func (v *updatePresetSortingUpdatePresetSortingPreset) GetCreatedAt() time.Time {
	return v.PresetFragment.CreatedAt
}

// GetUpdatedAt returns updatePresetSortingUpdatePresetSortingPreset.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updatePresetSortingUpdatePresetSortingPreset) GetUpdatedAt() time.Time {
	return v.PresetFragment.UpdatedAt
}

// GetSortIndex returns updatePresetSortingUpdatePresetSortingPreset.SortIndex, and is useful for accessing the field via an interface.
func (v *updatePresetSortingUpdatePresetSortingPreset) GetSortIndex() int {
	return v.PresetFragment.SortIndex
}

// GetName returns updatePresetSortingUpdatePresetSortingPreset.Name, and is useful for accessing the field via an interface.
func (v *updatePresetSortingUpdatePresetSortingPreset) GetName() string { return v.PresetFragment.Name }

// GetNote returns updatePresetSortingUpdatePresetSortingPreset.Note, and is useful for accessing the field via an interface.
func (v *updatePresetSortingUpdatePresetSortingPreset) GetNote() *string {
	return v.PresetFragment.Note
}

// GetTags returns updatePresetSortingUpdatePresetSortingPreset.Tags, and is useful for accessing the field via an interface.
func (v *updatePresetSortingUpdatePresetSortingPreset) GetTags() []*PresetFragmentTagsTag {
	return v.PresetFragment.Tags
}

func (v *updatePresetSortingUpdatePresetSortingPreset) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updatePresetSortingUpdatePresetSortingPreset
		graphql.NoUnmarshalJSON
	}
	firstPass.updatePresetSortingUpdatePresetSortingPreset = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PresetFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdatePresetSortingUpdatePresetSortingPreset struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	SortIndex int `json:"sortIndex"`

	Name string `json:"name"`

	Note *string `json:"note"`

	Tags []*PresetFragmentTagsTag `json:"tags"`
}

func (v *updatePresetSortingUpdatePresetSortingPreset) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updatePresetSortingUpdatePresetSortingPreset) __premarshalJSON() (*__premarshalupdatePresetSortingUpdatePresetSortingPreset, error) {
	var retval __premarshalupdatePresetSortingUpdatePresetSortingPreset

	retval.Id = v.PresetFragment.Id
	retval.CreatedAt = v.PresetFragment.CreatedAt
	retval.UpdatedAt = v.PresetFragment.UpdatedAt
	retval.SortIndex = v.PresetFragment.SortIndex
	retval.Name = v.PresetFragment.Name
	retval.Note = v.PresetFragment.Note
	retval.Tags = v.PresetFragment.Tags
	return &retval, nil
}

// updatePresetUpdatePreset includes the requested fields of the GraphQL type Preset.
// The GraphQL type's documentation follows.
//
// A preset is a template for time spans.
type updatePresetUpdatePreset struct {
	PresetFragment `json:"-"`
}

// GetId returns updatePresetUpdatePreset.Id, and is useful for accessing the field via an interface.
func (v *updatePresetUpdatePreset) GetId() string { return v.PresetFragment.Id }

// GetCreatedAt returns updatePresetUpdatePreset.CreatedAt, and is useful for accessing the field via an interface.
func (v *updatePresetUpdatePreset) GetCreatedAt() time.Time { return v.PresetFragment.CreatedAt }

// GetUpdatedAt returns updatePresetUpdatePreset.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updatePresetUpdatePreset) GetUpdatedAt() time.Time { return v.PresetFragment.UpdatedAt }

// GetSortIndex returns updatePresetUpdatePreset.SortIndex, and is useful for accessing the field via an interface.
func (v *updatePresetUpdatePreset) GetSortIndex() int { return v.PresetFragment.SortIndex }

// GetName returns updatePresetUpdatePreset.Name, and is useful for accessing the field via an interface.
func (v *updatePresetUpdatePreset) GetName() string { return v.PresetFragment.Name }

// GetNote returns updatePresetUpdatePreset.Note, and is useful for accessing the field via an interface.
func (v *updatePresetUpdatePreset) GetNote() *string { return v.PresetFragment.Note }

// GetTags returns updatePresetUpdatePreset.Tags, and is useful for accessing the field via an interface.
func (v *updatePresetUpdatePreset) GetTags() []*PresetFragmentTagsTag { return v.PresetFragment.Tags }

func (v *updatePresetUpdatePreset) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updatePresetUpdatePreset
		graphql.NoUnmarshalJSON
	}
	firstPass.updatePresetUpdatePreset = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PresetFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdatePresetUpdatePreset struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	SortIndex int `json:"sortIndex"`

	Name string `json:"name"`

	Note *string `json:"note"`

	Tags []*PresetFragmentTagsTag `json:"tags"`
}

func (v *updatePresetUpdatePreset) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updatePresetUpdatePreset) __premarshalJSON() (*__premarshalupdatePresetUpdatePreset, error) {
	var retval __premarshalupdatePresetUpdatePreset

	retval.Id = v.PresetFragment.Id
	retval.CreatedAt = v.PresetFragment.CreatedAt
	retval.UpdatedAt = v.PresetFragment.UpdatedAt
	retval.SortIndex = v.PresetFragment.SortIndex
	retval.Name = v.PresetFragment.Name
	retval.Note = v.PresetFragment.Note
	retval.Tags = v.PresetFragment.Tags
	return &retval, nil
}

// updateTimeSpanResponse is returned by updateTimeSpan on success.
type updateTimeSpanResponse struct {
	// Update a time span by id
	UpdateTimeSpan *updateTimeSpanUpdateTimeSpan `json:"updateTimeSpan"`
}

// GetUpdateTimeSpan returns updateTimeSpanResponse.UpdateTimeSpan, and is useful for accessing the field via an interface.
func (v *updateTimeSpanResponse) GetUpdateTimeSpan() *updateTimeSpanUpdateTimeSpan {
	return v.UpdateTimeSpan
}

// updateTimeSpanUpdateTimeSpan includes the requested fields of the GraphQL type TimeSpan.
// The GraphQL type's documentation follows.
//
// A time span is a period of time between a start and an end time.
// Time spans can be tagged to categorize time tracking.
type updateTimeSpanUpdateTimeSpan struct {
	TimeSpanFragment `json:"-"`
}

// GetId returns updateTimeSpanUpdateTimeSpan.Id, and is useful for accessing the field via an interface.
func (v *updateTimeSpanUpdateTimeSpan) GetId() string { return v.TimeSpanFragment.Id }

// GetCreatedAt returns updateTimeSpanUpdateTimeSpan.CreatedAt, and is useful for accessing the field via an interface.
func (v *updateTimeSpanUpdateTimeSpan) GetCreatedAt() time.Time { return v.TimeSpanFragment.CreatedAt }

// GetUpdatedAt returns updateTimeSpanUpdateTimeSpan.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateTimeSpanUpdateTimeSpan) GetUpdatedAt() time.Time { return v.TimeSpanFragment.UpdatedAt }

// GetStart returns updateTimeSpanUpdateTimeSpan.Start, and is useful for accessing the field via an interface.
func (v *updateTimeSpanUpdateTimeSpan) GetStart() time.Time { return v.TimeSpanFragment.Start }

// GetEnd returns updateTimeSpanUpdateTimeSpan.End, and is useful for accessing the field via an interface.
func (v *updateTimeSpanUpdateTimeSpan) GetEnd() *time.Time { return v.TimeSpanFragment.End }

// GetNote returns updateTimeSpanUpdateTimeSpan.Note, and is useful for accessing the field via an interface.
func (v *updateTimeSpanUpdateTimeSpan) GetNote() *string { return v.TimeSpanFragment.Note }

// GetRunning returns updateTimeSpanUpdateTimeSpan.Running, and is useful for accessing the field via an interface.
func (v *updateTimeSpanUpdateTimeSpan) GetRunning() bool { return v.TimeSpanFragment.Running }

// GetTags returns updateTimeSpanUpdateTimeSpan.Tags, and is useful for accessing the field via an interface.
func (v *updateTimeSpanUpdateTimeSpan) GetTags() []*TimeSpanFragmentTagsTag {
	return v.TimeSpanFragment.Tags
}

func (v *updateTimeSpanUpdateTimeSpan) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateTimeSpanUpdateTimeSpan
		graphql.NoUnmarshalJSON
	}
	firstPass.updateTimeSpanUpdateTimeSpan = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TimeSpanFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateTimeSpanUpdateTimeSpan struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Start time.Time `json:"start"`

	End *time.Time `json:"end"`

	Note *string `json:"note"`

	Running bool `json:"running"`

	Tags []*TimeSpanFragmentTagsTag `json:"tags"`
}

func (v *updateTimeSpanUpdateTimeSpan) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateTimeSpanUpdateTimeSpan) __premarshalJSON() (*__premarshalupdateTimeSpanUpdateTimeSpan, error) {
	var retval __premarshalupdateTimeSpanUpdateTimeSpan

	retval.Id = v.TimeSpanFragment.Id
	retval.CreatedAt = v.TimeSpanFragment.CreatedAt
	retval.UpdatedAt = v.TimeSpanFragment.UpdatedAt
	retval.Start = v.TimeSpanFragment.Start
	retval.End = v.TimeSpanFragment.End
	retval.Note = v.TimeSpanFragment.Note
	retval.Running = v.TimeSpanFragment.Running
	retval.Tags = v.TimeSpanFragment.Tags
	return &retval, nil
}

// versionResponse is returned by version on success.
type versionResponse struct {
	// Software version of the server.
	Version string `json:"version"`
}

// GetVersion returns versionResponse.Version, and is useful for accessing the field via an interface.
func (v *versionResponse) GetVersion() string { return v.Version }

// The query or mutation executed by closeTimeSpan.
const closeTimeSpan_Operation = `
mutation closeTimeSpan ($id: ID, $end: DateTime) {
	closeTimeSpan(id: $id, end: $end) {
		... TimeSpanFragment
	}
}
fragment TimeSpanFragment on TimeSpan {
	id
	createdAt
	updatedAt
	start
	end
	note
	running
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./timeSpan.fragment.graphql"
func closeTimeSpan(
	ctx context.Context,
	client graphql.Client,
	id *string,
	end *time.Time,
) (*closeTimeSpanResponse, error) {
	req := &graphql.Request{
		OpName: "closeTimeSpan",
		Query:  closeTimeSpan_Operation,
		Variables: &__closeTimeSpanInput{
			Id:  id,
			End: end,
		},
	}
	var err error

	var data closeTimeSpanResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createPreset.
const createPreset_Operation = `
mutation createPreset ($input: CreatePreset!) {
	createPreset(input: $input) {
		... PresetFragment
	}
}
fragment PresetFragment on Preset {
	id
	createdAt
	updatedAt
	sortIndex
	name
	note
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./preset.fragment.graphql"
func createPreset(
	ctx context.Context,
	client graphql.Client,
	input *CreatePreset,
) (*createPresetResponse, error) {
	req := &graphql.Request{
		OpName: "createPreset",
		Query:  createPreset_Operation,
		Variables: &__createPresetInput{
			Input: input,
		},
	}
	var err error

	var data createPresetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createTimeSpan.
const createTimeSpan_Operation = `
mutation createTimeSpan ($input: CreateTimeSpan!) {
	createTimeSpan(input: $input) {
		... TimeSpanFragment
	}
}
fragment TimeSpanFragment on TimeSpan {
	id
	createdAt
	updatedAt
	start
	end
	note
	running
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./timeSpan.fragment.graphql"
func createTimeSpan(
	ctx context.Context,
	client graphql.Client,
	input *CreateTimeSpan,
) (*createTimeSpanResponse, error) {
	req := &graphql.Request{
		OpName: "createTimeSpan",
		Query:  createTimeSpan_Operation,
		Variables: &__createTimeSpanInput{
			Input: input,
		},
	}
	var err error

	var data createTimeSpanResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createTimeSpanFromPreset.
const createTimeSpanFromPreset_Operation = `
mutation createTimeSpanFromPreset ($input: CreateTimeSpanFromPreset!) {
	createTimeSpanFromPreset(input: $input) {
		... TimeSpanFragment
	}
}
fragment TimeSpanFragment on TimeSpan {
	id
	createdAt
	updatedAt
	start
	end
	note
	running
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./timeSpan.fragment.graphql"
func createTimeSpanFromPreset(
	ctx context.Context,
	client graphql.Client,
	input *CreateTimeSpanFromPreset,
) (*createTimeSpanFromPresetResponse, error) {
	req := &graphql.Request{
		OpName: "createTimeSpanFromPreset",
		Query:  createTimeSpanFromPreset_Operation,
		Variables: &__createTimeSpanFromPresetInput{
			Input: input,
		},
	}
	var err error

	var data createTimeSpanFromPresetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deletePreset.
const deletePreset_Operation = `
mutation deletePreset ($id: ID!) {
	deletePreset(id: $id)
}
`

func deletePreset(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deletePresetResponse, error) {
	req := &graphql.Request{
		OpName: "deletePreset",
		Query:  deletePreset_Operation,
		Variables: &__deletePresetInput{
			Id: id,
		},
	}
	var err error

	var data deletePresetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteTimeSpan.
const deleteTimeSpan_Operation = `
mutation deleteTimeSpan ($id: ID!) {
	deleteTimeSpan(id: $id)
}
`

func deleteTimeSpan(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteTimeSpanResponse, error) {
	req := &graphql.Request{
		OpName: "deleteTimeSpan",
		Query:  deleteTimeSpan_Operation,
		Variables: &__deleteTimeSpanInput{
			Id: id,
		},
	}
	var err error

	var data deleteTimeSpanResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by me.
const me_Operation = `
query me {
	me {
		id
		createdAt
		updatedAt
		username
	}
}
`

func me(
	ctx context.Context,
	client graphql.Client,
) (*meResponse, error) {
	req := &graphql.Request{
		OpName: "me",
		Query:  me_Operation,
	}
	var err error

	var data meResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by preset.
const preset_Operation = `
query preset ($id: ID!) {
	preset(id: $id) {
		... PresetFragment
	}
}
fragment PresetFragment on Preset {
	id
	createdAt
	updatedAt
	sortIndex
	name
	note
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./preset.fragment.graphql"
func preset(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*presetResponse, error) {
	req := &graphql.Request{
		OpName: "preset",
		Query:  preset_Operation,
		Variables: &__presetInput{
			Id: id,
		},
	}
	var err error

	var data presetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by presets.
const presets_Operation = `
query presets ($search: PresetSearch) {
	presets(input: $search) {
		total
		items {
			... PresetFragment
		}
	}
}
fragment PresetFragment on Preset {
	id
	createdAt
	updatedAt
	sortIndex
	name
	note
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./preset.fragment.graphql"
func presets(
	ctx context.Context,
	client graphql.Client,
	search *PresetSearch,
) (*presetsResponse, error) {
	req := &graphql.Request{
		OpName: "presets",
		Query:  presets_Operation,
		Variables: &__presetsInput{
			Search: search,
		},
	}
	var err error

	var data presetsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by tags.
const tags_Operation = `
query tags ($search: TagSearch) {
	tags(input: $search) {
		total
		items {
			... TagFragment
		}
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./tag.fragment.graphql"
func tags(
	ctx context.Context,
	client graphql.Client,
	search *TagSearch,
) (*tagsResponse, error) {
	req := &graphql.Request{
		OpName: "tags",
		Query:  tags_Operation,
		Variables: &__tagsInput{
			Search: search,
		},
	}
	var err error

	var data tagsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by timeSpan.
const timeSpan_Operation = `
query timeSpan ($id: ID!) {
	timeSpan(id: $id) {
		... TimeSpanFragment
	}
}
fragment TimeSpanFragment on TimeSpan {
	id
	createdAt
	updatedAt
	start
	end
	note
	running
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./timeSpan.fragment.graphql"
func timeSpan(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*timeSpanResponse, error) {
	req := &graphql.Request{
		OpName: "timeSpan",
		Query:  timeSpan_Operation,
		Variables: &__timeSpanInput{
			Id: id,
		},
	}
	var err error

	var data timeSpanResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by timeSpans.
const timeSpans_Operation = `
query timeSpans ($search: TimeSpanSearch) {
	timeSpans(input: $search) {
		total
		items {
			... TimeSpanFragment
		}
	}
}
fragment TimeSpanFragment on TimeSpan {
	id
	createdAt
	updatedAt
	start
	end
	note
	running
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./timeSpan.fragment.graphql"
func timeSpans(
	ctx context.Context,
	client graphql.Client,
	search *TimeSpanSearch,
) (*timeSpansResponse, error) {
	req := &graphql.Request{
		OpName: "timeSpans",
		Query:  timeSpans_Operation,
		Variables: &__timeSpansInput{
			Search: search,
		},
	}
	var err error

	var data timeSpansResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updatePreset.
const updatePreset_Operation = `
mutation updatePreset ($id: ID!, $input: UpdatePreset!) {
	updatePreset(id: $id, input: $input) {
		... PresetFragment
	}
}
fragment PresetFragment on Preset {
	id
	createdAt
	updatedAt
	sortIndex
	name
	note
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./preset.fragment.graphql"
func updatePreset(
	ctx context.Context,
	client graphql.Client,
	id string,
	input *UpdatePreset,
) (*updatePresetResponse, error) {
	req := &graphql.Request{
		OpName: "updatePreset",
		Query:  updatePreset_Operation,
		Variables: &__updatePresetInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updatePresetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updatePresetSorting.
const updatePresetSorting_Operation = `
mutation updatePresetSorting ($input: [UpdatePresetSorting!]!) {
	updatePresetSorting(input: $input) {
		... PresetFragment
	}
}
fragment PresetFragment on Preset {
	id
	createdAt
	updatedAt
	sortIndex
	name
	note
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./preset.fragment.graphql"
func updatePresetSorting(
	ctx context.Context,
	client graphql.Client,
	input []*UpdatePresetSorting,
) (*updatePresetSortingResponse, error) {
	req := &graphql.Request{
		OpName: "updatePresetSorting",
		Query:  updatePresetSorting_Operation,
		Variables: &__updatePresetSortingInput{
			Input: input,
		},
	}
	var err error

	var data updatePresetSortingResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateTimeSpan.
const updateTimeSpan_Operation = `
mutation updateTimeSpan ($id: ID!, $input: UpdateTimeSpan!) {
	updateTimeSpan(id: $id, input: $input) {
		... TimeSpanFragment
	}
}
fragment TimeSpanFragment on TimeSpan {
	id
	createdAt
	updatedAt
	start
	end
	note
	running
	tags {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	createdAt
	updatedAt
	name
}
`

// import "./timeSpan.fragment.graphql"
func updateTimeSpan(
	ctx context.Context,
	client graphql.Client,
	id string,
	input *UpdateTimeSpan,
) (*updateTimeSpanResponse, error) {
	req := &graphql.Request{
		OpName: "updateTimeSpan",
		Query:  updateTimeSpan_Operation,
		Variables: &__updateTimeSpanInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateTimeSpanResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by version.
const version_Operation = `
query version {
	version
}
`

func version(
	ctx context.Context,
	client graphql.Client,
) (*versionResponse, error) {
	req := &graphql.Request{
		OpName: "version",
		Query:  version_Operation,
	}
	var err error

	var data versionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
